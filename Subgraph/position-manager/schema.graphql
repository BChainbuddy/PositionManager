enum ExecutionCondition {
  Above
  Below
}

enum UniswapABI {
  V2
  V3
}

enum PositionStatus {
  ACTIVE
  EXECUTED
  WITHDRAWN
}

type WhitelistedDexRouter @entity(immutable: false) {
  id: ID! # Address of the DexRouter
  isActive: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  positions: [Position!]! @derivedFrom(field: "dexRouter")
}

type Position @entity(immutable: false) {
  id: String! # Position ID, unique identifier
  wallet: Bytes! # Address of the user who created the position
  tokenIn: Token! # Input Token referencing Token Type
  tokenOut: Token! # Output Token referencing Token Type
  quantity: BigInt! # Quantity of input tokens
  executionValue: BigInt! # Desired swap price
  endTimestamp: BigInt! # Timestamp when the position ends
  fee: Int! # Fee associated with the position (in basis points)
  condition: ExecutionCondition! # Condition for executing the swap (Above or Below)
  forkABI: UniswapABI! # Specifies whether Uniswap V2 or V3 is used
  blockNumber: BigInt! # Block number when the position was created
  blockTimestamp: BigInt! # Timestamp of the block when the position was created
  transactionHash: Bytes # Hash of the transaction that created the position
  executedEvent: PositionExecuted @derivedFrom(field: "executedPosition")
  withdrawnEvent: PositionWithdrawn @derivedFrom(field: "withdrawnPosition")
  dexRouter: WhitelistedDexRouter
  prolongations: [PositionProlonged!]! @derivedFrom(field: "position")
  status: PositionStatus!
}

type PositionExecuted @entity(immutable: true) {
  id: String! # Position ID, unique identifier
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  executedPosition: Position!
}

type PositionWithdrawn @entity(immutable: true) {
  id: String! # Position ID, unique identifier
  wallet: Bytes! # addres
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  withdrawnPosition: Position!
}

type PositionProlonged @entity(immutable: true) {
  id: Bytes!
  positionId: BigInt! # uint256
  newEndTimestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  position: Position!
}

type Token @entity(immutable: true) {
  id: ID!
  name: String!
  symbol: String!
  decimals: BigInt!
  address: Bytes!

  inputPositions: [Position!]! @derivedFrom(field: "tokenIn")
  outputPositions: [Position!]! @derivedFrom(field: "tokenOut")
}
